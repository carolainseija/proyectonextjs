{"ast":null,"code":"// Oh you curious...\n// This is not a real database,\n// But let's imagine it is one :)\nimport allData from './data';\n\nclass Database {\n  constructor() {}\n\n  async getAll() {\n    const asArray = Object.values(allData);\n    await randomDelay();\n    return asArray;\n  }\n\n  async getById(id) {\n    if (!Object.prototype.hasOwnProperty.call(allData, id)) {\n      return null;\n    }\n\n    const entry = allData[id];\n    await randomDelay();\n    return entry;\n  }\n\n} // Let's also add a delay to make it a bit closer to reality\n\n\nconst randomDelay = () => new Promise(resolve => {\n  const max = 350;\n  const min = 100;\n  const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n  setTimeout(resolve, delay);\n});\n\nexport default Database;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/carolain Matea/platzi cursos/proyectonextjs/database/db.ts"],"names":["allData","Database","constructor","getAll","asArray","Object","values","randomDelay","getById","id","prototype","hasOwnProperty","call","entry","Promise","resolve","max","min","delay","Math","floor","random","setTimeout"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,OAAP,MAAoB,QAApB;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG,CAAE;;AAEhB,QAAMC,MAAN,GAAoC;AAClC,UAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcN,OAAd,CAAhB;AACA,UAAMO,WAAW,EAAjB;AACA,WAAOH,OAAP;AACD;;AAED,QAAMI,OAAN,CAAcC,EAAd,EAAoD;AAClD,QAAI,CAACJ,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCZ,OAArC,EAA8CS,EAA9C,CAAL,EAAwD;AACtD,aAAO,IAAP;AACD;;AAED,UAAMI,KAAK,GAAGb,OAAO,CAACS,EAAD,CAArB;AACA,UAAMF,WAAW,EAAjB;AACA,WAAOM,KAAP;AACD;;AAjBY,C,CAoBf;;;AACA,MAAMN,WAAW,GAAG,MAClB,IAAIO,OAAJ,CAAaC,OAAD,IAAa;AACvB,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGC,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAA5D;AAEAK,EAAAA,UAAU,CAACP,OAAD,EAAUG,KAAV,CAAV;AACD,CAND,CADF;;AASA,eAAejB,QAAf","sourcesContent":["// Oh you curious...\r\n// This is not a real database,\r\n// But let's imagine it is one :)\r\nimport allData from './data'\r\n\r\nclass Database {\r\n  constructor() {}\r\n\r\n  async getAll(): Promise<TProduct[]> {\r\n    const asArray = Object.values(allData)\r\n    await randomDelay()\r\n    return asArray\r\n  }\r\n\r\n  async getById(id: string): Promise<TProduct | null> {\r\n    if (!Object.prototype.hasOwnProperty.call(allData, id)) {\r\n      return null\r\n    }\r\n\r\n    const entry = allData[id]\r\n    await randomDelay()\r\n    return entry\r\n  }\r\n}\r\n\r\n// Let's also add a delay to make it a bit closer to reality\r\nconst randomDelay = () =>\r\n  new Promise((resolve) => {\r\n    const max = 350\r\n    const min = 100\r\n    const delay = Math.floor(Math.random() * (max - min + 1)) + min\r\n\r\n    setTimeout(resolve, delay)\r\n  })\r\n\r\nexport default Database"]},"metadata":{},"sourceType":"module"}